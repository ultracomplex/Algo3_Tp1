Object subclass: #AlgoTek	instanceVariableNames: 'evento'	classVariableNames: ''	package: 'TP1'!!AlgoTek methodsFor: 'not defined category' stamp: 'rama 9/29/2023 15:16'!entradaMasBarataPara: ev pagandoCon: pag|entradaMasBarata|entradaMasBarata := evento calcularEntradaMasBarataPagandoCon: pag.	^entradaMasBarata. 	! !!AlgoTek methodsFor: 'not defined category' stamp: 'rama 9/29/2023 15:16'!costoEntradaPara: ev enUbicacion: ubi pagandoCon: pag|precioRecibido|precioRecibido := evento sacarEntradaEnUbicacion: ubi pagandoCon: pag.^precioRecibido.  	! !!AlgoTek methodsFor: 'as yet unclassified' stamp: 'rama 9/29/2023 15:16'!paraEvento: ev registrarUbicacionCampo: ubi tarifa: tari|ubicacionCampo|	ubicacionCampo := UbicacionCampo conUbicacion: ubi conTarifa: tari.			evento registrarUbicacion: ubicacionCampo. 			! !!AlgoTek methodsFor: 'as yet unclassified' stamp: 'rama 9/29/2023 15:17'!paraEvento: ev registrarUbicacionViP: ubi tarifa: tari lugaresDisponibles: cant|ubicacionVip|	ubicacionVip := UbicacionViP conUbicacion: ubi conTarifa: tari conLugaresDis: cant.		evento registrarUbicacion: ubicacionVip.	 ! !!AlgoTek methodsFor: 'as yet unclassified' stamp: 'rama 9/29/2023 15:17'!paraEvento: ev registrarUbicacionPlateaPreferencial: ubi tarifa: tari|ubicacionPlatea|	ubicacionPlatea := UbicacionPlateaPreferencial conUbicacion: ubi conTarifa: tari.			evento registrarUbicacion: ubicacionPlatea.   ! !!AlgoTek methodsFor: 'as yet unclassified' stamp: 'rama 9/18/2023 11:57'!registroDeEvento: ev	evento := ev.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AlgoTek class	instanceVariableNames: ''!!AlgoTek class methodsFor: 'not defined category' stamp: 'rama 9/29/2023 15:18'!registrarEvento: ev deArtistaInternacional: ar conTarifaArtista: tari	|algoTek artis even|		(tari > 0) ifFalse: [ 		NoSePuedeIngresarValorQueDeComoResultadoNegativoOCero signal.	].	(ev isEmpty) ifTrue: [ 		NoSePuedeIngresarUnStringVacio signal. 		 ].	(ar isEmpty) ifTrue: [ 		NoSePuedeIngresarUnStringVacio signal. 		 ].		algoTek := self new.	artis := ArtistaInternacional conNombre: ar conTarifa: tari.	even := Evento conNombreEvento: ev conArtista: artis. 	algoTek registroDeEvento: even.	^algoTek.	! !!AlgoTek class methodsFor: 'not defined category' stamp: 'rama 9/29/2023 15:18'!registrarEvento: ev deArtistaNacional: ar conTarifaArtista: tari	|algoTek artis even|		(tari > 0) ifFalse: [ 		NoSePuedeIngresarValorQueDeComoResultadoNegativoOCero signal.	].		(ev isEmpty) ifTrue: [ 		NoSePuedeIngresarUnStringVacio signal. 		 ].	(ar isEmpty) ifTrue: [ 		NoSePuedeIngresarUnStringVacio signal. 		 ].		algoTek := self new.	artis := ArtistaNacional conNombre: ar conTarifa: tari.	even := Evento conNombreEvento: ev conArtista: artis.	algoTek registroDeEvento: even.	^algoTek. 	! !Object subclass: #Artista	instanceVariableNames: 'nombre tarifa'	classVariableNames: ''	package: 'TP1'!!Artista methodsFor: 'as yet unclassified' stamp: 'rama 9/25/2023 16:49'!asignarTarifa: tari	tarifa  := tari.! !!Artista methodsFor: 'as yet unclassified' stamp: 'rama 9/25/2023 16:36'!calcularImpuesto 	self subclassResponsibility.! !!Artista methodsFor: 'as yet unclassified' stamp: 'rama 9/25/2023 16:49'!asignarNombre: nom	nombre  := nom.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Artista class	instanceVariableNames: ''!!Artista class methodsFor: 'as yet unclassified' stamp: 'rama 9/25/2023 16:40'!conNombre: nom conTarifa: tari	|artista|	artista := self new.	artista asignarNombre: nom.	artista asignarTarifa: tari.	^artista. ! !Artista subclass: #ArtistaInternacional	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!ArtistaInternacional methodsFor: 'as yet unclassified' stamp: 'rama 9/25/2023 16:36'!calcularImpuesto	^((tarifa * 2) / 5 + 1000).! !Artista subclass: #ArtistaNacional	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!ArtistaNacional methodsFor: 'as yet unclassified' stamp: 'rama 9/25/2023 16:36'!calcularImpuesto	^(tarifa log).! !Error subclass: #ErroresAlgoTek	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!Object subclass: #Evento	instanceVariableNames: 'evento listaUbicaciones artista'	classVariableNames: ''	package: 'TP1'!!Evento methodsFor: 'as yet unclassified' stamp: 'rama 9/27/2023 13:20'!registroDeEvento: ev	evento := ev.! !!Evento methodsFor: 'as yet unclassified' stamp: 'rama 9/26/2023 23:26'!registroDeArtista: arti	artista := arti! !!Evento methodsFor: 'as yet unclassified' stamp: 'rama 9/26/2023 23:26'!establecerListaUbicaciones	listaUbicaciones := OrderedCollection new.! !!Evento methodsFor: 'as yet unclassified' stamp: 'rama 9/29/2023 15:19'!calcularEntradaMasBarataPagandoCon: pag|ubicacionEntradaMasBarata entradaBarata|	entradaBarata := 10000000.		listaUbicaciones do: [ :ubi | (entradaBarata > (ubi calcularElCosto  )) ifTrue: [ 	ubicacionEntradaMasBarata := 	ubi. 	entradaBarata  := (ubi calcularElCosto )]].				^(pag aplicarELDescuento: (entradaBarata + artista calcularImpuesto)).! !!Evento methodsFor: 'as yet unclassified' stamp: 'rama 9/27/2023 12:08'!sacarEntradaEnUbicacion: ubi pagandoCon: pag|res|	res := listaUbicaciones   detect: [ :elemento | elemento devolverUbicacion  = ubi ].			^(pag aplicarELDescuento: (res sacarEntrada + artista calcularImpuesto)). ! !!Evento methodsFor: 'as yet unclassified' stamp: 'rama 9/27/2023 13:18'!fijarSiElLugarYaFueRegistrado: ubi|ubicacionOcupada|		ubicacionOcupada := listaUbicaciones  anySatisfy: [:each | each devolverUbicacion  = ubi].		ubicacionOcupada 		ifTrue: [NoSePuedenRegistrarDosUbiacionesConElMismoNombre signal].! !!Evento methodsFor: 'as yet unclassified' stamp: 'rama 9/27/2023 13:20'!registrarUbicacion: ubiself fijarSiElLugarYaFueRegistrado: (ubi devolverUbicacion).	listaUbicaciones add: ubi.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Evento class	instanceVariableNames: 'artista evento'!!Evento class methodsFor: 'as yet unclassified' stamp: 'rama 9/27/2023 13:08'!conNombreEvento: ev conArtista: ar	| even|	even := self new.	even registroDeEvento: ev.	even registroDeArtista: ar.	even establecerListaUbicaciones. 	^even.! !Object subclass: #MedioDePago	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!MedioDePago methodsFor: 'not defined category' stamp: 'rama 9/27/2023 21:51'!aplicarELDescuento: num	self subclassResponsibility.! !MedioDePago subclass: #Efectivo	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!Efectivo methodsFor: 'not defined category' stamp: 'rama 9/20/2023 19:19'!aplicarELDescuento: num	^num.! !ErroresAlgoTek subclass: #NoSePuedeIngresarDosCerosEnLaUbicacionDePlateaPreferencial	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!ErroresAlgoTek subclass: #NoSePuedeIngresarUnStringVacio	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!ErroresAlgoTek subclass: #NoSePuedeIngresarUnaUbicacionLaCualNoTengaCuatroCaracteres	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!ErroresAlgoTek subclass: #NoSePuedeIngresarUnaUbicacionLaCualSusUltimosDosCaracteresNoSeanNumeros	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!ErroresAlgoTek subclass: #NoSePuedeIngresarValorNegativo	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!ErroresAlgoTek subclass: #NoSePuedeIngresarValorQueDeComoResultadoNegativoOCero	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!ErroresAlgoTek subclass: #NoSePuedenRegistrarDosUbiacionesConElMismoNombre	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!MedioDePago subclass: #Tarjeta	instanceVariableNames: 'nombre'	classVariableNames: ''	package: 'TP1'!!Tarjeta methodsFor: 'as yet unclassified' stamp: 'rama 9/20/2023 19:00'!asignarNombre: nom	nombre := nom.! !!Tarjeta methodsFor: 'not defined category' stamp: 'rama 9/20/2023 19:19'!aplicarELDescuento: num	  ^(num * 0.8).	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Tarjeta class	instanceVariableNames: ''!!Tarjeta class methodsFor: 'not defined category' stamp: 'rama 9/21/2023 17:13'!conNombre: nom	|tarjeta|		(nom isEmpty) ifTrue: [ 		NoSePuedeIngresarUnStringVacio signal. 		 ].		tarjeta := Tarjeta new.	tarjeta asignarNombre: nom.	^tarjeta. ! !Object subclass: #Ubicaciones	instanceVariableNames: 'ubicacion tarifa'	classVariableNames: ''	package: 'TP1'!!Ubicaciones methodsFor: 'as yet unclassified' stamp: 'rama 9/18/2023 13:24'!asignarTarifa: tari	tarifa := tari.! !!Ubicaciones methodsFor: 'as yet unclassified' stamp: 'rama 9/18/2023 13:29'!calcularElCosto	self subclassResponsibility.! !!Ubicaciones methodsFor: 'as yet unclassified' stamp: 'rama 9/19/2023 12:10'!sacarEntrada	self subclassResponsibility.! !!Ubicaciones methodsFor: 'as yet unclassified' stamp: 'rama 9/27/2023 12:48'!asignarUbicacion: ubi	ubicacion := ubi.! !!Ubicaciones methodsFor: 'not defined category' stamp: 'rama 9/27/2023 12:48'!devolverUbicacion	^ubicacion.! !Ubicaciones subclass: #UbicacionCampo	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!UbicacionCampo methodsFor: 'not defined category' stamp: 'rama 9/24/2023 23:34'!sacarEntrada 	^ (self calcularElCosto).! !!UbicacionCampo methodsFor: 'not defined category' stamp: 'rama 9/24/2023 23:34'!calcularElCosto 	^tarifa. ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!UbicacionCampo class	instanceVariableNames: ''!!UbicacionCampo class methodsFor: 'not defined category' stamp: 'rama 9/29/2023 15:20'!conUbicacion: ubi conTarifa: tari	|ubicacionCampo|		(tari > 0) ifFalse: [ 		NoSePuedeIngresarValorQueDeComoResultadoNegativoOCero signal.	].	(ubi isEmpty) ifTrue: [ 		NoSePuedeIngresarUnStringVacio signal. 		 ].		ubicacionCampo := UbicacionCampo new.	ubicacionCampo asignarUbicacion: ubi.	ubicacionCampo asignarTarifa: tari.	^ubicacionCampo. ! !Ubicaciones subclass: #UbicacionPlateaPreferencial	instanceVariableNames: 'ultimosDosNumeros'	classVariableNames: ''	package: 'TP1'!!UbicacionPlateaPreferencial methodsFor: 'not defined category' stamp: 'rama 9/24/2023 23:33'!sacarEntrada 	^(self calcularElCosto). ! !!UbicacionPlateaPreferencial methodsFor: 'not defined category' stamp: 'rama 9/18/2023 15:22'!sacarNumeroDeUbicaion|ultimosDos|ultimosDos := ubicacion copyFrom: (ubicacion size -1) to: ubicacion size. ultimosDosNumeros := (ultimosDos asInteger ).	! !!UbicacionPlateaPreferencial methodsFor: 'not defined category' stamp: 'rama 9/24/2023 23:32'!calcularElCosto 	^(tarifa * ultimosDosNumeros).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!UbicacionPlateaPreferencial class	instanceVariableNames: ''!!UbicacionPlateaPreferencial class methodsFor: 'not defined category' stamp: 'rama 9/29/2023 15:20'!conUbicacion: ubi conTarifa: tari	|ubicacionPlateaPreferencial ultimosDos res ultimosDosInt|		(tari > 0) ifFalse: [ 		NoSePuedeIngresarValorQueDeComoResultadoNegativoOCero signal.	].	((ubi size)=4) ifFalse:  [ 		NoSePuedeIngresarUnaUbicacionLaCualNoTengaCuatroCaracteres signal.		 ].		ultimosDos := ubi copyFrom: (ubi size -1) to: ubi size.	(res := ultimosDos isAllDigits) ifFalse: [    NoSePuedeIngresarUnaUbicacionLaCualSusUltimosDosCaracteresNoSeanNumeros signal.]. 		ultimosDosInt := ultimosDos asInteger.	(ultimosDosInt = 00) ifTrue: [ 		NoSePuedeIngresarDosCerosEnLaUbicacionDePlateaPreferencial signal.		 ].  			ubicacionPlateaPreferencial := UbicacionPlateaPreferencial  new.	ubicacionPlateaPreferencial asignarUbicacion: ubi.	ubicacionPlateaPreferencial asignarTarifa: tari.	ubicacionPlateaPreferencial sacarNumeroDeUbicaion.	^ubicacionPlateaPreferencial. ! !Ubicaciones subclass: #UbicacionViP	instanceVariableNames: 'cantLugaresDis'	classVariableNames: ''	package: 'TP1'!!UbicacionViP methodsFor: 'as yet unclassified' stamp: 'rama 9/18/2023 23:35'!asignarLuagresDis: cant	cantLugaresDis := cant.! !!UbicacionViP methodsFor: 'not defined category' stamp: 'rama 9/28/2023 00:29'!sacarEntrada |lugarSacado|lugarSacado := cantLugaresDis.(cantLugaresDis = 0) ifTrue: [ 	YaNoQuedanMasEntradasDiaponibles signal. 	 ].cantLugaresDis := cantLugaresDis -1. ^(tarifa/(lugarSacado))  ! !!UbicacionViP methodsFor: 'not defined category' stamp: 'rama 9/28/2023 00:28'!calcularElCosto  	^(tarifa/cantLugaresDis )	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!UbicacionViP class	instanceVariableNames: ''!!UbicacionViP class methodsFor: 'not defined category' stamp: 'rama 9/29/2023 15:20'!conUbicacion: ubi conTarifa: tari conLugaresDis: cant	|ubicacionVip|		(tari > 0) ifFalse: [ 		NoSePuedeIngresarValorQueDeComoResultadoNegativoOCero signal.	].	(cant > 0) ifFalse: [ 		NoSePuedeIngresarValorQueDeComoResultadoNegativoOCero signal.	].	(ubi isEmpty) ifTrue: [ 		NoSePuedeIngresarUnStringVacio signal. 		 ].		ubicacionVip := UbicacionViP  new.	ubicacionVip asignarUbicacion: ubi.	ubicacionVip asignarTarifa: tari.	ubicacionVip asignarLuagresDis: cant. 	^ubicacionVip. ! !ErroresAlgoTek subclass: #YaNoQuedanMasEntradasDiaponibles	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!